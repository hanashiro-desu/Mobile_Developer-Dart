/*
B√ÄI T·∫¨P: C·∫•u tr√∫c d·ªØ li·ªáu trong Dart
====================================
B√†i 1: List

C√≥ bao nhi√™u c√°ch ƒë·ªÉ khai b√°o m·ªôt List trong ƒëo·∫°n code? Li·ªát k√™ v√† gi·∫£i th√≠ch t·ª´ng c√°ch.
Cho List ['A', 'B', 'C']. Vi·∫øt code ƒë·ªÉ:

Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
X√≥a ph·∫ßn t·ª≠ 'B'
In ra ƒë·ªô d√†i c·ªßa List


ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?

dartCopyvar list = [1, 2, 3, 4, 5];
list.removeWhere((e) => e % 2 == 0);
print(list);

Gi·∫£i th√≠ch s·ª± kh√°c nhau gi·ªØa c√°c ph∆∞∆°ng th·ª©c:

remove() v√† removeAt()
add() v√† insert()
addAll() v√† insertAll()


====================================
B√†i 2: Set

Set kh√°c List ·ªü nh·ªØng ƒëi·ªÉm n√†o? N√™u √≠t nh·∫•t 3 ƒëi·ªÉm kh√°c bi·ªát.
Cho hai Set:

dartCopyvar set1 = {1, 2, 3};
var set2 = {3, 4, 5};
T√≠nh k·∫øt qu·∫£ c·ªßa:

Union (h·ª£p)
Intersection (giao)
Difference (hi·ªáu) c·ªßa set1 v·ªõi set2


ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?

dartCopyvar mySet = Set.from([1, 2, 2, 3, 3, 4]);
print(mySet.length);



====================================
B√†i 3: Map

Vi·∫øt code ƒë·ªÉ th·ª±c hi·ªán c√°c y√™u c·∫ßu sau v·ªõi Map:

dartCopyMap<String, dynamic> user = {
  'name': 'Nam',
  'age': 20,
  'isStudent': true
};

Th√™m email: 'nam@gmail.com'
C·∫≠p nh·∫≠t age th√†nh 21
X√≥a tr∆∞·ªùng isStudent
Ki·ªÉm tra xem Map c√≥ ch·ª©a key 'phone' kh√¥ng


So s√°nh hai c√°ch truy c·∫≠p gi√° tr·ªã trong Map:

dartCopyuser['phone']
user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'

Vi·∫øt m·ªôt h√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value, m·ªói c·∫∑p tr√™n m·ªôt d√≤ng.


====================================
Ph·∫ßn 4: Runes

Runes ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l√†m g√¨? Cho v√≠ d·ª• c·ª• th·ªÉ.
Vi·∫øt code ƒë·ªÉ:


T·∫°o m·ªôt Runes ch·ª©a k√Ω t·ª± emoji c∆∞·ªùi üòÄ
Chuy·ªÉn ƒë·ªïi Runes ƒë√≥ th√†nh String
In ra s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa Runes

*/

void main() {
  // B√†i 1: List
  List<String> list = ['A', 'B', 'C'];

  // Th√™m ph·∫ßn t·ª≠ 'D' v√†o cu·ªëi List
  list.add('D');
  print(list); // Output: ['A', 'B', 'C', 'D']

  // Ch√®n ph·∫ßn t·ª≠ 'X' v√†o v·ªã tr√≠ th·ª© 1
  list.insert(1, 'X');
  print(list); // Output: ['A', 'X', 'B', 'C', 'D']

  // X√≥a ph·∫ßn t·ª≠ 'B'
  list.remove('B');
  print(list); // Output: ['A', 'X', 'C', 'D']

  // In ra ƒë·ªô d√†i c·ªßa List
  print(list.length); // Output: 4

  // ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
  var list2 = [1, 2, 3, 4, 5];
  list2.removeWhere((e) => e % 2 == 0);
  print(list2); // Output: [1, 3, 5]

  // Gi·∫£i th√≠ch s·ª± kh√°c nhau gi·ªØa c√°c ph∆∞∆°ng th·ª©c:
  // remove() v√† removeAt()
  // remove() x√≥a ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c√≥ gi√° tr·ªã b·∫±ng v·ªõi gi√° tr·ªã ƒë∆∞·ª£c cung c·∫•p.
  // removeAt() x√≥a ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ ch·ªâ ƒë·ªãnh.

  // add() v√† insert()
  // add() th√™m m·ªôt ph·∫ßn t·ª≠ v√†o cu·ªëi danh s√°ch.
  // insert() ch√®n m·ªôt ph·∫ßn t·ª≠ v√†o v·ªã tr√≠ ch·ªâ ƒë·ªãnh.

  // addAll() v√† insertAll()
  // addAll() th√™m t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt danh s√°ch kh√°c v√†o cu·ªëi danh s√°ch hi·ªán t·∫°i.
  // insertAll() ch√®n t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·ªßa m·ªôt danh s√°ch kh√°c v√†o v·ªã tr√≠ ch·ªâ ƒë·ªãnh.

  // B√†i 2: Set
  var set1 = {1, 2, 3};
  var set2 = {3, 4, 5};

  // Union (h·ª£p)
  var unionSet = set1.union(set2);
  print(unionSet); // Output: {1, 2, 3, 4, 5}

  // Intersection (giao)
  var intersectionSet = set1.intersection(set2);
  print(intersectionSet); // Output: {3}

  // Difference (hi·ªáu) c·ªßa set1 v·ªõi set2
  var differenceSet = set1.difference(set2);
  print(differenceSet); // Output: {1, 2}

  // ƒêo·∫°n code sau s·∫Ω cho k·∫øt qu·∫£ g√¨?
  var mySet = Set.from([1, 2, 2, 3, 3, 4]);
  print(mySet.length); // Output: 4

  // B√†i 3: Map
  Map<String, dynamic> user = {
    'name': 'Nam',
    'age': 20,
    'isStudent': true
  };

  // Th√™m email: 'nam@gmail.com'
  user['email'] = 'nam@gmail.com';

  // C·∫≠p nh·∫≠t age th√†nh 21
  user['age'] = 21;

  // X√≥a tr∆∞·ªùng isStudent
  user.remove('isStudent');

  // Ki·ªÉm tra xem Map c√≥ ch·ª©a key 'phone' kh√¥ng
  bool hasPhone = user.containsKey('phone');
  print(hasPhone); // Output: false

  // So s√°nh hai c√°ch truy c·∫≠p gi√° tr·ªã trong Map:
  // user['phone']: Tr·∫£ v·ªÅ gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi key 'phone', n·∫øu key kh√¥ng t·ªìn t·∫°i s·∫Ω tr·∫£ v·ªÅ null.
  // user['phone'] ?? 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i': Tr·∫£ v·ªÅ gi√° tr·ªã t∆∞∆°ng ·ª©ng v·ªõi key 'phone', n·∫øu key kh√¥ng t·ªìn t·∫°i s·∫Ω tr·∫£ v·ªÅ chu·ªói 'Kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i'.

  // Vi·∫øt m·ªôt h√†m nh·∫≠n v√†o m·ªôt Map v√† in ra t·∫•t c·∫£ c√°c c·∫∑p key-value, m·ªói c·∫∑p tr√™n m·ªôt d√≤ng.
  printMap(user);

  // Ph·∫ßn 4: Runes
  // T·∫°o m·ªôt Runes ch·ª©a k√Ω t·ª± emoji c∆∞·ªùi üòÄ
  var smiley = Runes('\u{1F600}');

  // Chuy·ªÉn ƒë·ªïi Runes ƒë√≥ th√†nh String
  String smileyString = String.fromCharCodes(smiley);

  // In ra s·ªë l∆∞·ª£ng ƒëi·ªÉm m√£ c·ªßa Runes
  print(smiley.length); // Output: 1
  print(smileyString); // Output: üòÄ

}

void printMap(Map<String, dynamic> map) {
  map.forEach((key, value) {
    print('$key: $value');
  });
}